@page "/AreaCalculation/triangle"
@using Figures.Contracts;
@using Figures;

@if(triangle == null)
{
    <DisplaySpinner></DisplaySpinner>

}
<h2>Triangle</h2>
<br />
<div class="row">
	<div class="col-6 border p-3">
		<div>
			
			X:<input type="number" @bind-value=@sides[0] @bind-value:event="oninput" /><br />
		</div>
		<br />
		<div>
			Y:<input type="number" @bind-value=@sides[1] @bind-value:event="oninput" /><br />

		</div>
		<br />
		<div>
			Z:<input type="number" @bind-value=@sides[2] @bind-value:event="oninput" /><br />

		</div>
	</div>
	<div class="col-6 border p-3">
		@*<button class="btn btn-success" @onclick="()=>(CreateTriangle())">*@
			@*<b>Calculate triangle area</b></button>*@
		<div>Is triangle created?:<br />
			@if(CreateTriangle())
			{
				<p>@message</p>
			}
			else{<p>@message</p>}
			</div>
		Triangle area:<p>@area</p>	
			
		<br/>
		@if (CalculateArea()>0)
		{
			<p>Triangle area:@area</p>
		}
		else
		{
			<p>Triangle area:Calculation unavailable!</p>
		}

		

	</div>
</div>
@code {


	private int x { get; set; } =7;
	private int y=5;
	private int z=6;
	private int area = 1;
	private int[] sides = new int[3] { 7, 5, 6 };
	string message="";
	[Parameter]
	public EventCallback OnButtonClick{ get; set; }
	ITriangle triangle = Figures.GetTriangle();
	public bool CreateTriangle()
	{
		if((sides[0]==0)&&(sides[1]==0)
				&&(sides[1]==0))
		{
			sides = triangle.GetSides(x, y, z);
			return false;
		}

		if(triangle.IsTriangle(sides)==true)
		{
			message = "Triangle created!";
			Console.WriteLine("true"+" "+ sides[0]+" "+area);
			return true;

		}
		else
		{
			message = "Checked sides! Creation failed";
			Console.WriteLine("false");
			return false;

		}
	}
	public int CalculateArea()
	{
		area = triangle.Area(sides);
		Console.WriteLine(area);
		return area;
	}
	//public async Task CheckTriangle()
	//{ try
	//	{
	//		var result = CreateTriangle();

	//		return await Task.;
	//	}
	//	catch (Exception)
	//	{
			
	//		throw;
	//	}
		
	//}

	

	

}
