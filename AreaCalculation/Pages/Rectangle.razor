@page "/rectangle"
@inject IToastService toastService

@if (message == null)
{
	<DisplaySpinner></DisplaySpinner>

}

<h2>Rectangle</h2>

<button @onclick="changeImg">
	<img id="myImg" class="img-fluid img-thumbnail" src="/Image/rectangle.jpg" alt="Rectangle" width="300" height="200">
	
	<!-- The Modal -->
	<div id="myModal" class="modal">
		<span class="close">&times;</span>
		<img class="modal-content" id="img01">
		<div id="caption"></div>
	</div>
</button>
<br />
<br />
<br />
<div class="row">
	<div class="col-6 border p-3">
		<div>

			X:<input type="number" style="width:100px" @bind-value=@sides[0] @bind-value:event="oninput" /><br />
		</div>
		<br />
		<div>
			Y:<input type="number" style="width:100px" @bind-value=@sides[1] @bind-value:event="oninput" /><br />

		</div>
		<br />
		
	</div>
	<div class="col-6 border p-3">

		<button class="btn btn-success" @onclick="CalculateRectangle">
			<b>Calculate rectangle area</b>
		</button>
		<br />
		<br />

		<p role="status">Rectangle area:<br />@message</p>
		

	</div>

</div>

@code {


	[Inject]
	public IJSRuntime Js { get; set; }

	private double area = 1;
	private int[] sides = new int[2] ;
	string message = " ";

	IRectangle rectangle = Figures.GetRectangle();
	public bool CreateRectangle()
	{
		if ((sides[0] == 0) && (sides[1] == 0))
		{
			
			return false;
		}

		return true;
	}
	public double CalculateArea()
	{
		area = rectangle.Area(sides);
		Console.WriteLine(area);
		return area;
	}
	
	public void CalculateRectangle()
	{
		bool result = CreateRectangle();
		if (CalculateArea() > 0)
		{
			message = area.ToString();
			toastService.ShowSuccess("Rectangle successfully created! Get the area!");
		}
		else
		{
			message = "Calculation unavailable!";
			toastService.ShowError("Rectangle Faulty! Change sides sizes! At least one side is equal zero!");
		}
		
	}
	private async Task changeImg()
	{
		await Js.InvokeVoidAsync("changeImg");
	}
}
